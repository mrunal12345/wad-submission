Name: Mrunal Bansod
Roll No:07



Linux and Ruby basics:

1. Describe the following Linux Commands:

1. pwd: In Unix-like and some other operating systems, the pwd command (print working directory) writes the full pathname of the current working directory to the standard output.

2. top: The Linux top command is used to show all the running processes within your Linux environment.

3. less: Less is a program similar to more, but which allows backward movement in the file as well as forward movement. Also, less does not have to read the entire input file before starting, so with large input files it starts up faster than text editors like vi .

4. man: man is the system's manual viewer; it can be used to display manual pages, scroll up and down, search for occurrences of specific text, and other useful functions.

5. chmod: chmod changes the permissions of each given file according to mode, where mode describes the permissions to modify. Mode can be specified with octal numbers or with letters.

2. Difference between chmod a+x vs 755:
      chmod a+x will add the exec bits to the file but will not touch other bits. For example file        might be still unreadable to others and group.
chmod 755 will always make the file with perms 755 no matter what initial permissions were.
3. Describe REPL:
   A Read–Eval–Print Loop (REPL), also known as an interactive toplevel or language shell, is a simple, interactive computer programming environment that takes single user inputs (i.e. single expressions), evaluates them, and returns the result to the user; a program written in a REPL environment is executed piecewise. The term is most usually used to refer to programming interfaces similar to the classic Lisp machine interactive environment. Common examples include command line shells and similar environments for programming languages, and is particularly characteristic of scripting languages.
4. Iterators in Ruby:
Iterators are not an original concept with ruby. They are in common use in object-oriented languages. They are also used in Lisp, though there they are not called iterators.
Example:
#!/bin/sh

for i in *.[ch]; do
  # ... here would be something to do for each file
done

5. Write a ruby program to overload ‘+’ operator:



Install Ruby using RVM:

1. What rvm used for?
Not only does RVM make installing multiple ruby interpreters / runtimes easy and consistent, it provides features such as gemsets that aren't typically supported out of the box on most ruby installs.
	RVM also lets you use different rubies in a manner that won't mess with your existing ruby 	install (unless you tell it to) as well as letting you run multiple different rubies in separate 	terminals concurrently!
2. What is ‘#’?

3.   Ruby program to find n’th number in fibonacci series:
def fibonacci( n )
  return  n  if ( 0..1 ).include? n
  ( fibonacci( n - 1 ) + fibonacci( n - 2 ) )
end
puts fibonacci( 8 )
            
            output:
            mrunal@mrunal-HP-15-Notebook-PC:~/Desktop$ ruby hi.rb
             21 

4. Ruby program to solve josephus problem:
def josephus(size, steps, survivors = 2)
  list = *1..size

  def list.[](i)
    fetch(i % length)
  end

  puts "Population #{list.length}, #{steps} steps, #{survivors} survivors"

  while list.length > survivors
    list.delete(list[steps-1])
    list.rotate!(steps-1)
  end

  puts "Position of survivors: #{list}"
end

puts josephus(6,2)









Git
1. What is Git?
Git (/ɡɪt/) is a version control system (VCS) for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for software development, but it can be used to keep track of changes in any files. As a distributed revision control system it is aimed at speed, data integrity, and support for distributed, non-linear workflows.

Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development. Its current maintainer since 2005 is Junio Hamano.

As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version tracking abilities, independent of network access or a central server.

Like the Linux kernel, Git is free software distributed under the terms of the GNU General Public License version 2.
2. What is Github?
GitHub is a web-based Git or version control repository and Internet hosting service. It offers all of the distributed version control and source code management (SCM) functionality of Git as well as adding its own features. It provides access control and several collaboration features such as bug tracking, feature requests, task management, and wikis for every project.[3]

GitHub offers both plans for private and free repositories on the same account[4] which are commonly used to host open-source software projects.[5] As of April 2017, GitHub reports having almost 20 million users and 57 million repositories,[6] making it the largest host of source code in the world.[7]

GitHub has a mascot called Octocat, a cat with five tentacles and a human-like face



      
Assignment 4
Sinatra Saga

Q1. What is a bundler?
	Bundler provides a consistent environment for
	Ruby projects by tracking and installing the exact gems and versions
	that are needed.
	Bundler is an exit from dependency hell, and
	ensures that the gems you need are present in development, staging,
	and production. Starting work on a project is as simple as bundle
	install.
	$ gem install bundler – installs bundler
Q2. What does the bundle install command do?
	Installs the dependencies specified in the
	Gemfile.Install the gems specified in your Gemfile(5). If this
	is the first time you run bundle install (and a Gemfile.lock does
	not exist), bundler will fetch all remote sources, resolve
	dependencies and install all needed gems.
	If a gemfile.lock does exist, and you
	have not updated your Gemfile(5), bundler will fetch all remote
	sources, but use the dependencies specified in
	the Gemfile.lock instead of resolving dependencies.
	If a Gemfile.lock does exist, and you
	have updated your Gemfile(5), bundler will use the dependencies
	in theGemfile.lock for all gems that you did not update, but
	will re-resolve the dependencies of gems that you did update. 
Q3. What is a gemfile?
	A Gemfile is a file we create which is
	used for describing gem dependencies for Ruby programs. A gem is a
	collection of Ruby code that we can extract into a “collection”
	which we can call later.A  Gemfile is a file we create which is
	used for describing gem dependencies for Ruby programs. A gem is a
	collection of Ruby code that we can extract into a “collection”
	which we can call later.
	Your Gemfile should always be in the root of
	your project directory, this is where Bundler expects it to be and it
	is the standard place for any package manager style files to live.
	It is useful to note that your Gemfile is
	evaluated as Ruby code. When it is evaluated by Bundler the
	context it is in allows us access to certain methods that we will use
	to explain our gem requirements.Ruby developers use Gemfiles all the
	time, and most of us know how to do the basics. In this post I want
	to dive deep into everything we can do with a Gemfile.
Assignment 5
Sinatra : routes

Q1. What are routes? 
	Sinatra routes are simply Ruby methods with an
	associated code block that get called every time a request matches
	the given route pattern.The :id part of the route pattern
	is a named parameter and will be accessible in your code
	from the params hash: params[:id], but I'll describe these in
	further detail later in this post.Routes are matched in the exact
	order that they are defined in your code, this means that second
	route in the below example will never get matched because we have the
	exact same pattern further up in the code.The explicit routes should
	always be added towards the top of your route file or controller. I
	can guarantee you that this has been the source a many hours of
	frustration by developers working with Sinatra.Route method names
	correspond to HTTP 1.1 request method names to make things
	easier to remember.
Q2. How to add a new gem to your project?
	Add whatever gem you want to use in Gemfile.
	Execute bundle install
Q3. Sinatra application to calcule nth fibonaci
number.

	require 'sinatra'

	get '/' do
		name = params[:name]
		if name!=nil
			return "Hello #{name}!"
		else 
			return "No parameter!"
		end
	end

	get '/Fibo' do
		n = params[:n]
		if n!=nil
			i = n.to_i
			num = Fib(i)
			return "Value = #{num}"
		else
			return "No parameters given!"
		end
		
	end
	def Fib(n)
		i=2
		a=0
		b=1
		while i<n
			c = a + b
			a = b
			b = c
			i = i + 1
		end
		return c 
	end


Assignment 6
Deploy sinatra app on Heroku
Q1. Find a sinatra application on Github and run
it locally.
Q2. Deploy the application to Heroku.
      
      
            





